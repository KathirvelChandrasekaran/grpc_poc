// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: ride_data.proto

package grpc_poc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ride_Create_FullMethodName = "/Ride/Create"
)

// RideClient is the client API for Ride service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the Ride service with a server-streaming method
type RideClient interface {
	// The Create method streams chunks of RideData arrays to the client
	Create(ctx context.Context, in *CreateRideRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CreateRideResponse], error)
}

type rideClient struct {
	cc grpc.ClientConnInterface
}

func NewRideClient(cc grpc.ClientConnInterface) RideClient {
	return &rideClient{cc}
}

func (c *rideClient) Create(ctx context.Context, in *CreateRideRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CreateRideResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Ride_ServiceDesc.Streams[0], Ride_Create_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateRideRequest, CreateRideResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Ride_CreateClient = grpc.ServerStreamingClient[CreateRideResponse]

// RideServer is the server API for Ride service.
// All implementations must embed UnimplementedRideServer
// for forward compatibility.
//
// Define the Ride service with a server-streaming method
type RideServer interface {
	// The Create method streams chunks of RideData arrays to the client
	Create(*CreateRideRequest, grpc.ServerStreamingServer[CreateRideResponse]) error
	mustEmbedUnimplementedRideServer()
}

// UnimplementedRideServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRideServer struct{}

func (UnimplementedRideServer) Create(*CreateRideRequest, grpc.ServerStreamingServer[CreateRideResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRideServer) mustEmbedUnimplementedRideServer() {}
func (UnimplementedRideServer) testEmbeddedByValue()              {}

// UnsafeRideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RideServer will
// result in compilation errors.
type UnsafeRideServer interface {
	mustEmbedUnimplementedRideServer()
}

func RegisterRideServer(s grpc.ServiceRegistrar, srv RideServer) {
	// If the following call pancis, it indicates UnimplementedRideServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ride_ServiceDesc, srv)
}

func _Ride_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateRideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RideServer).Create(m, &grpc.GenericServerStream[CreateRideRequest, CreateRideResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Ride_CreateServer = grpc.ServerStreamingServer[CreateRideResponse]

// Ride_ServiceDesc is the grpc.ServiceDesc for Ride service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ride_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ride",
	HandlerType: (*RideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _Ride_Create_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ride_data.proto",
}
